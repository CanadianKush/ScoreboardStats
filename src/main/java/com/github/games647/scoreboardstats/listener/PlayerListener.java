package com.github.games647.scoreboardstats.listener;import com.github.games647.scoreboardstats.ScoreboardStats;import com.github.games647.scoreboardstats.Settings;import com.github.games647.scoreboardstats.pvpstats.Database;import com.github.games647.scoreboardstats.pvpstats.PlayerCache;import com.github.games647.scoreboardstats.pvpstats.SaveTask;import com.github.games647.variables.Other;import org.bukkit.Bukkit;import org.bukkit.Sound;import org.bukkit.entity.Player;import org.bukkit.event.EventHandler;import org.bukkit.event.Listener;import org.bukkit.event.entity.PlayerDeathEvent;import org.bukkit.event.player.PlayerChangedWorldEvent;import org.bukkit.event.player.PlayerJoinEvent;import org.bukkit.event.player.PlayerKickEvent;import org.bukkit.event.player.PlayerQuitEvent;import org.bukkit.scoreboard.DisplaySlot;public final class PlayerListener implements Listener {    @EventHandler    public static void onDeath(PlayerDeathEvent death) {        final Player killed = death.getEntity();        final Player killer = killed.getKiller();        if (!Settings.isPvpStats()                || Settings.isDisabledWorld(killed.getWorld().getName())) {            return;        }        final PlayerCache killedcache = Database.getCache(killed.getName());        if (killedcache != null) {            killedcache.onDeath();        }        if (killer != null                && killer.isOnline()) {            final PlayerCache killercache = Database.getCache(killer.getName());            if (killercache != null) {                killercache.onKill();            }            if (Settings.isSound()) {                killer.playSound(killer.getLocation(), Sound.ORB_PICKUP, Other.VOLUME, Other.PITCH);            }        }    }    @EventHandler    public static void onJoin(PlayerJoinEvent join) {        final Player player = join.getPlayer();        Bukkit.getScheduler().runTaskAsynchronously(ScoreboardStats.getInstance(), new Runnable() {            @Override            public void run() {                if (Settings.isPvpStats()) {                    Database.loadAccount(player.getName());                }            }        });    }    @EventHandler(ignoreCancelled = true)    public static void onChange(PlayerChangedWorldEvent teleport) {        final Player player = teleport.getPlayer();        if (Settings.isDisabledWorld(player.getWorld().getName())) {            player.getScoreboard().clearSlot(DisplaySlot.SIDEBAR);        }    }    @EventHandler    public static void onKick(PlayerKickEvent kick) {        if (Settings.isPvpStats()) {            Bukkit.getScheduler().runTaskLaterAsynchronously(ScoreboardStats.getInstance(), new SaveTask(kick.getPlayer()), Other.DELAYED_SAVE);        }    }    @EventHandler    public static void onQuit(PlayerQuitEvent quit) {        if (Settings.isPvpStats()) {            Bukkit.getScheduler().runTaskLaterAsynchronously(ScoreboardStats.getInstance(), new SaveTask(quit.getPlayer()), Other.DELAYED_SAVE);        }    }}